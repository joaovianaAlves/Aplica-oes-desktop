<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pictureBox1.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        UlJS8h/g5OT/5ybaXkcJUHMAAAAASUVORK5CYII=
</value>
  </data>
</root>